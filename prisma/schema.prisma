generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
//1
model User{
    id String @id @default(uuid())
    name String
    email String @unique
    firebaseUid String @unique
    // password String?
    phoneNumber String? 
    role Role @default(user)
    status Status
    profileImage String
    Product Product[]
    Order Order[]
    Cart Cart[]
    Payment Payment[]
    RatingAndReview RatingAndReview[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
//main n sub catagory 2,self referencing
model Catagory{
    id String @id @default(uuid())
    name String  @unique 
    parentId String? 
    parent Catagory? @relation("CatagoryParent",fields: [parentId] ,references: [id], onDelete:Cascade)
    subcategories Catagory[] @relation("CatagoryParent")
    Product Product[]
    @@index([parentId])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
//3
model Product{
        id String @id @default(uuid())
        name String
        image String[]
        description String
        price Decimal
        stock Decimal?
        sku String? @unique
        sellerId String
        discount Decimal?
        seller User @relation(fields: [sellerId],references: [id])
        catagoryId String
        catagory Catagory @relation(fields: [catagoryId],references: [id])
        status ProductStatus
        ProductVariant ProductVariant[]
        OrderItem OrderItem[]
        CartItem CartItem[]
        RatingAndReview RatingAndReview[]
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt

        @@index([sellerId])
        @@index([catagoryId])
        @@index([name])


}
//4
model ProductVariant{
     id String @id @default(uuid())
     stock Decimal
     sku String @unique
     productId String
     product Product @relation(fields: [productId],references: [id])
     attribute Json
}
//5
model Order{
        id String @id @default(uuid())
        userId String
        user User @relation(fields: [userId],references: [id])
        status OrderStatus
        OrderItem OrderItem[]
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt
        Payment Payment[]
}
//6
model OrderItem{
        id String @id @default(uuid())
        orderId String
        order Order @relation(fields: [orderId],references: [id])
        productId String
        product Product @relation(fields: [productId],references: [id])
        quantity Int
        price Float
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt

}
//7
model Cart{
        id String @id @default(uuid())
        userId String
        user User @relation(fields: [userId],references: [id])
        CartItem CartItem[]
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt

}
//8
model CartItem{
        id String @id @default(uuid())
        cartId String
        cart Cart @relation(fields: [cartId],references: [id])
        productId String
        product Product @relation(fields: [productId],references: [id])
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt
}
//9
model Payment{
        id String @id @default(uuid())
        userId String
        user User @relation(fields: [userId],references: [id])
        orderId String
        order Order @relation(fields: [orderId],references: [id])
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt
}
//10
model RatingAndReview{
     id String @id @default(uuid())
     userId String
     user User @relation(fields: [userId],references: [id])
     productId String
     product Product @relation(fields: [productId],references: [id])
     reviewText String
     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt
}

enum Role{
    user
    admin
    seller
}
enum Status{
    active
    inactive

}
enum ProductStatus{
    out_of_stock
    active
    inactive
}
enum OrderStatus{
    pending
    cancelled
    delivered
}