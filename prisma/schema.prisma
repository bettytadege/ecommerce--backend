generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
//1
model User{
    id String @id @default(uuid())
    name String?
    email String @unique
    firebaseUid String @unique
    // password String?
    phoneNumber String? 
    role Role @default(user)
    status Status
//     profileImage String?
    Product Product[]
    Order Order[]
    Cart Cart[]
    Payment Payment[]
    RatingAndReview RatingAndReview[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
//main n sub category with 3 layer
model MainCategory {
  id            String          @id @default(uuid())
  name          String          @unique
        
  subCategories SubCategory[]   @relation("MainToSub")
  products      Product[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

}

model SubCategory {
  id              String           @id @default(uuid())
  name            String    @unique
  
  mainCategoryId  String
  mainCategory    MainCategory    @relation("MainToSub", fields: [mainCategoryId], references: [id], onDelete: Cascade)
  subSubCategories SubSubCategory[] @relation("SubToSubSub")
  products        Product[]

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model SubSubCategory {
  id            String         @id @default(uuid())
  name          String
  subCategoryId String
  subCategory   SubCategory   @relation("SubToSubSub", fields: [subCategoryId], references: [id], onDelete: Cascade)
  products      Product[]
   
   attribute Json
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

//3
model Product{
        id String @id @default(uuid())
        name String
        image String[]
        description String
        price Decimal
        stock Decimal?
        sku String            @unique
        sellerId String
        discount Decimal?
        seller User @relation(fields: [sellerId],references: [id], onDelete:Cascade)
        maincategoryId String
        mainCategory MainCategory @relation(fields: [maincategoryId],references: [id], onDelete:Cascade)
        subCategoryId String 
        subCategory SubCategory @relation(fields: [subCategoryId],references: [id], onDelete:Cascade)
        categoryId String
        subSUbCategory SubSubCategory @relation(fields: [categoryId],references: [id], onDelete:Cascade)
        status ProductStatus
        ProductVariant ProductVariant[]
        OrderItem OrderItem[]
        CartItem CartItem[]
        RatingAndReview RatingAndReview[]
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt

        @@index([sellerId])
        @@index([categoryId])
        


}
//4
model ProductVariant{
     id String @id @default(uuid())
     stock Decimal
     sku String @unique
     productId String
     price Decimal?
     product Product @relation(fields: [productId],references: [id],onDelete:Cascade)
     attribute Json
}
//5
model Order{
        id String @id @default(uuid())
        userId String
        user User @relation(fields: [userId],references: [id])
        status OrderStatus
        OrderItem OrderItem[]
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt
        Payment Payment[]
}
//6
model OrderItem{
        id String @id @default(uuid())
        orderId String
        order Order @relation(fields: [orderId],references: [id])
        productId String
        product Product @relation(fields: [productId],references: [id])
        quantity Int
        price Float
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt

}
//7
model Cart{
        id String @id @default(uuid())
        userId String
        user User @relation(fields: [userId],references: [id])
        CartItem CartItem[]
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt

}
//8
model CartItem{
        id String @id @default(uuid())
        cartId String
        cart Cart @relation(fields: [cartId],references: [id])
        productId String
        product Product @relation(fields: [productId],references: [id])
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt
}
//9
model Payment{
        id String @id @default(uuid())
        userId String
        user User @relation(fields: [userId],references: [id])
        orderId String
        order Order @relation(fields: [orderId],references: [id])
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt
}
//10
model RatingAndReview{
     id String @id @default(uuid())
     userId String
     user User @relation(fields: [userId],references: [id])
     productId String
     product Product @relation(fields: [productId],references: [id])
     reviewText String
     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt
}

enum Role{
    user
    admin
    seller
}
enum Status{
    active
    inactive

}
enum ProductStatus{
    out_of_stock
    active
    inactive
}
enum OrderStatus{
    pending
    cancelled
    delivered
}