generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
//1
model User{
    id String @id @default(uuid())
    name String?
    email String @unique
    firebaseUid String @unique
    // password String?
    phoneNumber String? 
    role Role @default(USER)
    status Status
    avatar String?
    
    address Address[]
    
    Product Product[]
    Order Order[]
 
    Payment Payment[]
    RatingAndReview RatingAndReview[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Cart Cart[]
}

model Address {
  id        String   @id @default(uuid())
  city      String
  state     String
  street    String
  postalCode String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  Order Order[] @relation("address")
}


model Category {
  id        String      @id @default(uuid())
  name      String
  parentId  String?       @map("parent_id")
  parent    Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children  Category[] @relation("CategoryHierarchy")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  Product Product[]
}




//3

   model Product{
        id String @id @default(uuid())
        name String
        image String[]
        description String
        price Float
        stock Float? 
        sku String            @unique
        sellerId String
        discount Decimal?
        seller User @relation(fields: [sellerId],references: [id], onDelete:Cascade)
       
        categoryId String
        category Category @relation(fields: [categoryId],references: [id], onDelete:Cascade)
        status ProductStatus
        ProductVariant ProductVariant[]
       
        RatingAndReview RatingAndReview[]
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt

        @@index([sellerId])
        @@index([categoryId])
        
        Order Order[]
        // Cart Cart[]
}
//4
model ProductVariant{
     id String @id @default(uuid())
     stock Float 
     sku String @unique
     productId String
     price Float?
     product Product @relation(fields: [productId],references: [id],onDelete:Cascade)
     attribute Json
     order Order[]
     Cart Cart[]
}
//5
model Order{

        id String @id @default(uuid())
        userId String
        user User @relation(fields: [userId],references: [id])
        status OrderStatus
        productId String
        product Product @relation(fields: [productId],references: [id])
        quantity Int
        subTotal Float
         Payment Payment[]
       variantId String
        productVariant   ProductVariant  @relation(fields: [variantId], references: [id])
        cartId         String?       
       cart           Cart?          @relation(fields: [cartId], references: [id])
      addressId String
      address  Address   @relation("address", fields: [addressId], references: [id])
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt
       
}

model Cart{
        id String @id @default(uuid())
        userId String
        quantity    Int 
        user User @relation(fields: [userId],references: [id])
        //  productId String
        // product Product @relation(fields: [productId],references: [id])
        variantId String
        productVariant   ProductVariant  @relation(fields: [variantId], references: [id])
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt

        @@unique([userId, variantId])

        Order Order[]
}

model Payment{
        id String @id @default(uuid())
        userId String
        user User @relation(fields: [userId],references: [id])
        orderId String
        order Order @relation(fields: [orderId],references: [id])
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt
}
//10
model RatingAndReview{
     id String @id @default(uuid())
     userId String
     user User @relation(fields: [userId],references: [id])
     productId String
     product Product @relation(fields: [productId],references: [id])
     reviewText String
     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt
}

enum Role{
    USER
    ADMIN
    SELLER
}
enum Status{
    ACTIVE
    INACTIVE

}
enum ProductStatus{
    OUTOFSTOCK
    ACTIVE
    INACTIVE
}
enum OrderStatus{
    PENDING
    CANCELLED
    FAILED
    DELIVERED
    CONFIRMED
}